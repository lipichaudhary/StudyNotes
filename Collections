How HashMap works in Java? --> best link to prepare for interview
http://www.javainterviewpoint.com/hashmap-works-internally-java/

Java Maps
Map is an interface that provides a blueprint for data structures that take  pairs and map keys to their associated values 
(it's important to note that both the  and the  must be Objects and not primitives). 
The implementation is done by implementing classes such as HashMap or LinkedHashMap. 

HashMap : it have key/value pairs
No duplicate keys are allowed.
if any duplicate key is inserted then its old value is replaced by new value.
there can be duplicate values but no duplicate key
Only one null key is allowed but there can be multiple null values.

HashSet: 1. means no duplicate elements.If you try to add a duplicate element in hashset then the old value would be overridden.
2. Internal functioning of hashset uses hasMap but hashset have only elements which can be either key or value.
It doesn't have key value both.
3.it allows only one null element(key or value).
4.No order is maintained.
5.Implements SET interface. 
6. It is non-synchronized.
7. To make hashset as synchronized :     Set s=Collections.synchronizedSet(new hashSet());
8.Backed by hashtable (actually a hashMap instance)
9.It returns fail fast iterator. It will throw ConcurrentModificationException if hashSet is modified after creation of iterator,
except the iterator's own remove();

public object clone() // it returns the copy of hasSet object.
HashSet hset = new hashSet();
hset.add("lipi");
hset.clear(); // remove all elements
hset.contains(Object o); // checks whether o is present in hashSet.

Interview question: 
3 ways to prevent concurrentModificationException to occur?

Concurrent modification exception can occur either in single threaded or multi threaded environment.
1. To avoid concurrentModificationException in multi threaded environment:
a) if you are using JDK1.5 or higher version then you can use concurrent classes to avoid this exception i.e. 
ConcurrentHashMap and CopyOnWriteArrayList classes we can use.
b) As this exception occurs for collection classes, another approach is you can convert the list to an array and then iterate over it.
but this approach is good for small or medium size list but if the list is large then it will affect the performance a lot.
c) you can lock the list by putting it in synchronized block but this approach is not recommended as it will cease the effect of
multithreading.

2. To avoid exception in single threaded environment.
a) Use the iterator's remove() function to remove the object from underlying collection.But in this case you can remove the same object
and not any other object from the list.











