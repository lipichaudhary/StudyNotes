Links: http://www.baeldung.com/spring-interview-questions

Spring sub-projects or Modules:
1. Core: Spring is the most important module and it provides all the fundamental parts of spring framework like IOC or DI
2. JDBC: tHIS module enables the JDBC abstraction layer that removes the need to do JDBC coding for specific vendor databases.
3 ORM Integration: to integrate hibernate JPA JDO ....
Provides the integration layers for popular object relational mapping APIs JPA, JDO and hibernate
4. Web: A web oriented integration module, providing multipart file upload, servlet listeners and web oriented application context 
functionalities.
5. MVC framework: a web module WHICH implements the MVC(Model view controller) design pattern.
6. AOP Module: Aspect oriented programming module impementation allows the definition of clean method interceptors and pointcuts.

Dependency Injection: is an aspect of IOC(Inversion of control) which states that you do not create your objects manually instead describe
how they should be created. An IOC container will instantiate required classes if required.

How can we inject beans in spring:
1. setter injection
2. constructor injection
3. field injection

confuguration can be done using xml files or annotations.

Spring MVC Model:
https://www.codejava.net/frameworks/spring/spring-mvc-beginner-tutorial-with-spring-tool-suite-ide

1. Spring Dispatcher servlet: Works as a front controller b/w spring application and all clients.Is a dispatcher servlet which intercepts all the request coming to the application and then it consults with handler mapping to decide that which controller need to be invoked to handle the requests.
2. Handler Mapping: finds the appropriate controller for each request. The mapping b/w the requested URL's and controller classes is done via XML configuration or annotations.
3. Controller: is responsible for processing the requests by calling other business/ service classes. whatever be the output it will be attached to the model objects which will sent to the view.To know that to which view the output should be rendered controller consults the view resolver.
4. View Resolver: find the physical view files from the logical names.
5. View: physical files like JSP,HTML, XML, velocity template etc.



@Controller annotation marks this class as Spring Bean which will handle different HTTP request based on mapping specified on class or individual controller methods.

@RequestMapping annotation is used for mapping the web requests onto specific handler classes and handler methods. 

In our case we have applied it on class level too, which says that this class is default handler for all HTTP requests of type '/'.
@RequestMapping("/")
public class HelloWorldController {
}

@RequestMapping have several attributes[value, method, params..] which can be used to narrow down your mapping to more specific selection.

First Method does not have any URL mapping declared, so it will inherit the mapping from mapping declared on class level, acting as default 
handler for GET requests.
