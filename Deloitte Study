Immutable Class:
Class whose object cannot be modified once created.If any modification is done then it will result in new object.
Modification to an immutable object results in new object.for example, String in java is immutable. 
Mostly, immutable are final in java in order to prevent sub class from overriding methods in Java which can compromise Immutability.
Another way of achieving immutablity without making them final is by making them private, and also not modifying them except in constructor.

There are many immutable classes in java like String, short, byte, Integer, Long, Float, Boolean, Double etc.We can say, all wrapper classes are 
immutable and String is immutable.

How to create an immutable class?
We can create immutable classes

Rules:
1. Make class as final so that no subclasses can be formed.
2. Make its instance variables as final so that its value cannot be changed once an object is created.
3. There should not be any setter methods for these instance variables so we get no option to change its value.

Class Employee{
  final String EmpPanCard;
  
  public Employee(String EmpPanCard){
    this.EmpPanCard = EmpPanCard;
  }
  
  private String getEmpPanCard(){
      return EmpPanCard;
  }
}      
/* from javatpoint  https://www.javatpoint.com/how-to-create-immutable-class */
The above class is immutable because:

The instance variable of the class is final i.e. we cannot change the value of it after creating an object.
The class is final so we cannot create the subclass.
There is no setter methods i.e. we have no option to change the value of the instance variable.
These points makes this class as immutable.

______Extra Info______
Use immutable classes provided by JDK as key in Map to avoid implementation of hashCode() and equals() for our custom class.
Also immutable classes make sure that hashCode() and equals() will not change in future that will solve any issue with mutability

How can we achieve thread safety in Java?
There are several ways to achieve thread safety in java – synchronization, atomic concurrent classes, implementing 
concurrent Lock interface, using volatile keyword, using immutable classes and Thread safe classes. Learn more at thread safety tutorial.

Q1) What is an immutable class?RRR
Ans) Immutable class is a class which once created, it’s contents can not be changed. Immutable objects are the objects whose state can not be changed once constructed. e.g. String class
Q2) How to create an immutable class?RRR
Ans) To create an immutable class following steps should be followed:
1.	Create a final class.
2.	Set the values of properties using constructor only.
3.	Make the properties of the class final and private
4.	Do not provide any setters for these properties.
5.	If the instance fields include references to mutable objects, don't allow those objects to be changed:
1.	Don't provide methods that modify the mutable objects.
2.	Don't share references to the mutable objects. Never store references to external, mutable objects passed to the constructor; if necessary, create copies, and store references to the copies. Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.
public final class FinalPersonClass { 
    private final String name; 
    private final int age; 

    public FinalPersonClass(final String name, final int age) {       
     this.name = name; 
     this.age = age; 
    } 
    public int getAge() { 
      return age; 
    } 
    public String getName() { 
     return name; 
    } 
  }
Q3) Immutable objects are automatically thread-safe –true/false?RRR
Ans) True. Since the state of the immutable objects can not be changed once they are created they are automatically synchronized/thread-safe.
Q4) Which classes in java are immutable?RRR
Ans) All wrapper classes in java.lang are immutable – 
String, Integer, Boolean, Character, Byte, Short, Long, Float, Double, BigDecimal, BigInteger
Q5) What are the advantages of immutability?RRR
Ans)
•	Immutable objects are automatically thread-safe, the overhead caused due to use of synchronisation is avoided.
•	Once created the state of the immutable object can not be changed so there is no possibility of them getting into an inconsistent state.
•	The references to the immutable objects can be easily shared or cached without having to copy or clone them as there state can not be changed ever after construction.
•	The best use of the immutable objects is as the keys of a map.

________ HashCode and Equals Method______________
HashCode(): this function returns a hashcode for the given input. It takes a key as input and returns its hashcode which is an integer 
value. The hashcode is also known as hash value.


public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        StringBuffer sb = new StringBuffer();
        while(n>1)
        {
            int rem = n%2;
            sb.append(rem);
            n = n/2;
        }
        int count=0;
        String s= sb.toString();
        for(int i=0;i<s.length();i++){
            if((s.charAt(i)=='1' && s.charAt(i+1)=='1') || (s.charAt(0)=='1' && s.charAt(s.length()-1)=='1')){
                count++;
            }
        }
        System.out.println(count);
        
    }
}




