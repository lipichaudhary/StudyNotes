Study link:
http://www.javamadesoeasy.com/2015/05/string-is-immutable-in-java.html

http://www.javamadesoeasy.com/2015/05/string-pool-string-literal-pool-string.html
#at_pco=smlwn-1.0&at_si=5ab22dcbd70c7596&at_ab=per-2&at_pos=0&at_tot=1

String is immutable in java means its state once craeted if changed it will result into another object.
means if you change the string object then it will result into a new object.
for e.g. String str = "abc";
         S.O.P(str.concat("def")); // abcdef
         S.O.P(str); // abc
cd is concated with ab and a new string is formed in string pool as abcdef as no string with abcdef is present in pool but there
won't be any reference variable to abcdef meanwhile str is pointing to abc.
Therefore, str is referring to abc and string "abcdef" is eligible for garbage collection.
         
example2: String str="ab";
          str="abcd";
          so now abcd is refered by str while string"ab" is eligible for garbage collection.
Advantages of string being immutable:
1.  hashcode of string is cached: JVM CACHED THE HASHCODE OF FREQUENTLY USED STRING in application.Therefore, JVM doesn't need to 
calculate the hashcode again. Hence, it will incraese the performance of the application.

2. Avoiding the security threats: String is used as parameter in many important java classes like network connection and file IO.
if string would not hv been immutable then it would have caused serious security threats to application bcz any change made at one place 
could have also changed String passed in these classes as well.

String pool concept:

String s1 = "abc";
No string with “abc” is there in pool, so JVM will create string in string pool and s1 will be a reference variable which will refer to it.

 String s2 = new String("abc");
string is created using new operator, it will force JVM to create new string in heap (not in string pool).

 String s3 = "abc";
string with “abc” is there in pool, so s3 will be a reference variable which will refer to “abc” in string pool.

 String s4 = new String("abc");
string is created using new operator, it will force JVM to create new string in heap (not in string pool).

 String s5 = new String("abc").intern();
string is created using new operator but intern method has been invoked on it, so s5 will be a reference variable which will refer to “abc” in string pool.


About intern method in java
Method is found in java.lang.String class
When the intern method is invoked, if the string pool already contains a string equal to this String object as determined by
the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the string pool 
and a reference to this String object is returned.

 Example in java -
String s1 = "abc";    
"abc" is created in string pool i.e. String object is added to the string pool.
String s5 = new String("abc").intern();

Now what happens internally when the above statement is executed?
when the intern method is invoked , if the string pool already contains a string which is equal to the string object will be determined by 
equals(Object) method.
As "abc" already exists in the string pool(bcz of String s1 = "abc")
so, "abc".equals("abc") will return true and s5 will be reference varaible which will refer to the "abc" in the string pool.
so, s1==s5 retuen true.

Why String Pool in java?
As strings are widely used in java code and are immutable which allows them to be cached in memory to 
save memory and increase the performance.
Less no. of strings r created in heap memory so less work for garbage collector also.







